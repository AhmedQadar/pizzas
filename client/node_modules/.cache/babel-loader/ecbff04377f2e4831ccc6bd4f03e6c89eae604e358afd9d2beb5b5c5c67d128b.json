{"ast":null,"code":"var _jsxFileName = \"/home/qadhar/pizzas/client/src/MyContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyContext = /*#__PURE__*/createContext();\n\n// Custom hook for using the context\nexport const useMyContext = () => {\n  _s();\n  return useContext(MyContext);\n};\n_s(useMyContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst MyContextProvider = ({\n  children\n}) => {\n  _s2();\n  // State variables\n  const [loginStatus, setLoginStatus] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const [popUp, setPopUp] = useState(false);\n  //const [restaurants, setRestaurants] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [cartCounter, setCartCounter] = useState(0);\n  const [pizzas, setPizzas] = useState([]);\n\n  // Effect to fetch restaurants when component mounts\n  useEffect(() => {\n    fetchRestaurants();\n  }, []);\n\n  // Update login status\n  const updateLoginStatus = newState => {\n    setLoginStatus(newState);\n  };\n\n  // Update theme (dark mode)\n  const updateTheme = newState => {\n    setDarkMode(newState);\n  };\n\n  // Update popup state\n  const updatePopUpState = newState => {\n    setPopUp(newState);\n  };\n\n  // Close the cart popup\n  const closeTheCart = () => {\n    updatePopUpState(false);\n  };\n\n  // Update search term\n  const updateSearchTerm = newState => {\n    setSearchTerm(newState);\n  };\n\n  // Set restaurants\n  const setRestaurantsData = newState => {\n    setRestaurants(newState);\n  };\n\n  // Set cart counter\n  const setCartCounterData = newState => {\n    setCartCounter(newState);\n  };\n\n  // Fetch restaurants from the API\n  const fetchRestaurants = () => {\n    fetch(\"http://your-api-url.com/restaurants\").then(response => response.json()).then(data => {\n      setRestaurantsData(data);\n    }).catch(error => {\n      console.error(\"Error fetching restaurants:\", error);\n    });\n  };\n\n  // Context value\n  const contextValue = {\n    loginStatus,\n    updateLoginStatus,\n    darkMode,\n    updateTheme,\n    popUp,\n    updatePopUpState,\n    closeTheCart,\n    searchTerm,\n    updateSearchTerm,\n    restaurants,\n    setRestaurants: setRestaurantsData,\n    cartCounter,\n    setCartCounter: setCartCounterData,\n    pizzas,\n    // Include pizzas in the context\n    setPizzas // Function to set pizzas\n  };\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s2(MyContextProvider, \"niKWzW6DcADBQ1tJBvBNv1g9IGU=\");\n_c = MyContextProvider;\nexport default MyContextProvider;\nvar _c;\n$RefreshReg$(_c, \"MyContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","MyContext","useMyContext","_s","MyContextProvider","children","_s2","loginStatus","setLoginStatus","darkMode","setDarkMode","popUp","setPopUp","searchTerm","setSearchTerm","cartCounter","setCartCounter","pizzas","setPizzas","fetchRestaurants","updateLoginStatus","newState","updateTheme","updatePopUpState","closeTheCart","updateSearchTerm","setRestaurantsData","setRestaurants","setCartCounterData","fetch","then","response","json","data","catch","error","console","contextValue","restaurants","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/qadhar/pizzas/client/src/MyContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\n\n// Create the context\nconst MyContext = createContext();\n\n// Custom hook for using the context\nexport const useMyContext = () => useContext(MyContext);\n\nconst MyContextProvider = ({ children }) => {\n  // State variables\n  const [loginStatus, setLoginStatus] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const [popUp, setPopUp] = useState(false);\n  //const [restaurants, setRestaurants] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [cartCounter, setCartCounter] = useState(0);\n  const [pizzas, setPizzas] = useState([]);\n\n  // Effect to fetch restaurants when component mounts\n  useEffect(() => {\n    fetchRestaurants();\n  }, []);\n\n  // Update login status\n  const updateLoginStatus = (newState) => {\n    setLoginStatus(newState);\n  };\n\n  // Update theme (dark mode)\n  const updateTheme = (newState) => {\n    setDarkMode(newState);\n  };\n\n  // Update popup state\n  const updatePopUpState = (newState) => {\n    setPopUp(newState);\n  };\n\n  // Close the cart popup\n  const closeTheCart = () => {\n    updatePopUpState(false);\n  };\n\n  // Update search term\n  const updateSearchTerm = (newState) => {\n    setSearchTerm(newState);\n  };\n\n  // Set restaurants\n  const setRestaurantsData = (newState) => {\n    setRestaurants(newState);\n  };\n\n  // Set cart counter\n  const setCartCounterData = (newState) => {\n    setCartCounter(newState);\n  };\n\n  // Fetch restaurants from the API\n  const fetchRestaurants = () => {\n    fetch(\"http://your-api-url.com/restaurants\")\n      .then((response) => response.json())\n      .then((data) => {\n        setRestaurantsData(data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching restaurants:\", error);\n      });\n  };\n\n  // Context value\n  const contextValue = {\n    loginStatus,\n    updateLoginStatus,\n    darkMode,\n    updateTheme,\n    popUp,\n    updatePopUpState,\n    closeTheCart,\n    searchTerm,\n    updateSearchTerm,\n    restaurants,\n    setRestaurants: setRestaurantsData,\n    cartCounter,\n    setCartCounter: setCartCounterData,\n    pizzas, // Include pizzas in the context\n    setPizzas, // Function to set pizzas\n  };\n\n  return (\n    <MyContext.Provider value={contextValue}>{children}</MyContext.Provider>\n  );\n};\n\nexport default MyContextProvider;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}